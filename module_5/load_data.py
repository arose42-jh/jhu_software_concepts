"""
Module to load applicant data from a JSON file and insert it into a PostgreSQL database.

This script reads applicant data, processes GPA and GRE fields, and populates a database table.

The script uses a database cursor to execute SQL commands and commits changes at the end.

Notable values:
    - cursor (cur): Used to execute SQL commands within a context manager.
    - commit: connection.commit() is called to save all changes to the database.
"""

import json
from datetime import datetime
import re
import psycopg
#Load the Json results
with open("module_3/applicant_data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

#Connect to the database
connection = psycopg.connect(
    dbname = "applicants",
    user = "postgres"
    )

#removes the 'GPA' from the GPA resutls
def gpa(gpa_str):
    """
    Extracts the GPA as a float from a string.

    Args:
        gpa_str (str): The GPA string (e.g., '3.85 GPA').
    Returns:
        float or None: The extracted GPA value, or None if not found.
    """
    if not gpa_str:
        return None
    match = re.search(r"(\d\.\d{1,2})", gpa_str)
    return float(match.group(1)) if match else None

def gres(gre_str):
    """
    Extracts GRE total, verbal, and analytical writing scores from a string.

    Args:
        gre_str (str): The GRE string (e.g., 'GRE 330 V 165 AW 4.5').
    Returns:
        tuple: (total, verbal, aw) as floats or None if not found.
    """

    if not gre_str:
        return None, None, None

    #Splits up the GRE results into 3 seperate numbers
    #regex obtained from ai
    total = verbal = aw = None
    total_match = re.search(r'\bGRE\s+(\d{3})\b', gre_str)
    verbal_match = re.search(r'\bGRE\s+V\s+(\d{2,3})\b', gre_str)
    aw_match = re.search(r'\bGRE\s+AW\s+(\d\.\d{1,2})\b', gre_str)

    if total_match:
        total = float(total_match.group(1))
    if verbal_match:
        verbal = float(verbal_match.group(1))
    if aw_match:
        aw = float(aw_match.group(1))

    return total, verbal, aw
with connection:
    with connection.cursor() as cur: #pylint: disable=no-member
    #removes previous table
        cur.execute("DROP TABLE IF EXISTS applicants;")
    #Creates the Table
        cur.execute(
        """CREATE TABLE IF NOT EXISTS applicants(
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        program TEXT,
        comments TEXT,
        date_added DATE,
        url TEXT,
        status TEXT,
        term TEXT,
        us_or_international TEXT,
        gpa FLOAT,
        gre FLOAT,
        gre_v FLOAT,
        gre_aw FLOAT,
        degree TEXT);"""
        )
    #Inputs the data to the table
        for entry in data:
            date_str = entry.get("Date Added")
            try:
                DATE_OBJ = datetime.strptime(date_str, "%B %d, %Y").date() if date_str else None
            except ValueError:
                DATE_OBJ = None

            gpa_fl = gpa(entry.get("GPA"))
            gretot, grev,greaw = gres(entry.get("GRE"))
            dept = entry.get("Program")
            uni = entry.get("University")
            PROGRAM = f"{dept}, {uni}"

            cur.execute("""
                INSERT INTO applicants (
                    program, degree, date_added, status,
                    url, term, us_or_international, gpa, gre, gre_v, gre_aw, comments
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);

            """, (
                PROGRAM,
                entry.get("Degree"),
                DATE_OBJ,
                entry.get("Decision"),
                entry.get("URL"),
                entry.get("Term"),
                entry.get("Nationality"),
                gpa_fl,
                gretot,
                grev,
                greaw,
                entry.get("Comments")
            ))
