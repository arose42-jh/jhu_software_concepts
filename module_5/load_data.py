"""
Module to load applicant data from a JSON file and insert it into a PostgreSQL database.

This script reads applicant data, processes GPA and GRE fields, and populates a database table.

The script uses a database cursor to execute SQL commands and commits changes at the end.

Notable values:
    - cursor (cur): Used to execute SQL commands within a context manager.
    - commit: connection.commit() is called to save all changes to the database.
"""

import json
from datetime import datetime
import re
import psycopg
from psycopg import sql

#Load the Json results
with open("module_3/applicant_data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

#Connect to the database
connection = psycopg.connect(
    dbname = "applicants",
    user = "postgres"
    )

#removes the 'GPA' from the GPA resutls
def gpa(gpa_str):
    """
    Extracts the GPA as a float from a string.

    Args:
        gpa_str (str): The GPA string (e.g., '3.85 GPA').
    Returns:
        float or None: The extracted GPA value, or None if not found.
    """
    if not gpa_str:
        return None
    match = re.search(r"(\d\.\d{1,2})", gpa_str)
    return float(match.group(1)) if match else None

def gres(gre_str):
    """
    Extracts GRE total, verbal, and analytical writing scores from a string.

    Args:
        gre_str (str): The GRE string (e.g., 'GRE 330 V 165 AW 4.5').
    Returns:
        tuple: (total, verbal, aw) as floats or None if not found.
    """

    if not gre_str:
        return None, None, None

    #Splits up the GRE results into 3 seperate numbers
    #regex obtained from ai
    total = verbal = aw = None
    total_match = re.search(r'\bGRE\s+(\d{3})\b', gre_str)
    verbal_match = re.search(r'\bGRE\s+V\s+(\d{2,3})\b', gre_str)
    aw_match = re.search(r'\bGRE\s+AW\s+(\d\.\d{1,2})\b', gre_str)

    if total_match:
        total = float(total_match.group(1))
    if verbal_match:
        verbal = float(verbal_match.group(1))
    if aw_match:
        aw = float(aw_match.group(1))

    return total, verbal, aw

with connection:
    with connection.cursor() as cur: #pylint: disable=no-member
    #removes previous table
        drop_table = sql.SQL("DROP TABLE IF EXISTS {table};").format(
            table=sql.Identifier("applicants")
        )

        cur.execute(drop_table)

        # Create table statement with proper identifiers
        create_table_query = sql.SQL("""
            CREATE TABLE IF NOT EXISTS {table}(
                {id_col} int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                {program_col} TEXT,
                {comments_col} TEXT,
                {date_added_col} DATE,
                {url_col} TEXT,
                {status_col} TEXT,
                {term_col} TEXT,
                {us_or_international_col} TEXT,
                {gpa_col} FLOAT,
                {gre_col} FLOAT,
                {gre_v_col} FLOAT,
                {gre_aw_col} FLOAT,
                {degree_col} TEXT
            );
        """).format(
            table=sql.Identifier("applicants"),
            id_col=sql.Identifier("id"),
            program_col=sql.Identifier("program"),
            comments_col=sql.Identifier("comments"),
            date_added_col=sql.Identifier("date_added"),
            url_col=sql.Identifier("url"),
            status_col=sql.Identifier("status"),
            term_col=sql.Identifier("term"),
            us_or_international_col=sql.Identifier("us_or_international"),
            gpa_col=sql.Identifier("gpa"),
            gre_col=sql.Identifier("gre"),
            gre_v_col=sql.Identifier("gre_v"),
            gre_aw_col=sql.Identifier("gre_aw"),
            degree_col=sql.Identifier("degree")
        )
        cur.execute(create_table_query)

    #Inputs the data to the table
        insert_query = sql.SQL("""
                INSERT INTO {table} (
                    {program_col}, {degree_col}, {date_added_col}, {status_col},
                    {url_col}, {term_col}, {us_or_international_col}, {gpa_col}, 
                    {gre_col}, {gre_v_col}, {gre_aw_col}, {comments_col}
                ) VALUES ({placeholders});
            """).format(
                table=sql.Identifier("applicants"),
                program_col=sql.Identifier("program"),
                degree_col=sql.Identifier("degree"),
                date_added_col=sql.Identifier("date_added"),
                status_col=sql.Identifier("status"),
                url_col=sql.Identifier("url"),
                term_col=sql.Identifier("term"),
                us_or_international_col=sql.Identifier("us_or_international"),
                gpa_col=sql.Identifier("gpa"),
                gre_col=sql.Identifier("gre"),
                gre_v_col=sql.Identifier("gre_v"),
                gre_aw_col=sql.Identifier("gre_aw"),
                comments_col=sql.Identifier("comments"),
                placeholders=sql.SQL(", ").join([sql.Placeholder()] * 12)
            )

        for entry in data:
            date_str = entry.get("Date Added")
            try:
                DATE_OBJ = datetime.strptime(date_str, "%B %d, %Y").date() if date_str else None
            except ValueError:
                DATE_OBJ = None

            gpa_fl = gpa(entry.get("GPA"))
            gretot, grev,greaw = gres(entry.get("GRE"))
            dept = entry.get("Program")
            uni = entry.get("University")
            PROGRAM = f"{dept}, {uni}"

            cur.execute(insert_query, (
                PROGRAM,
                entry.get("Degree"),
                DATE_OBJ,
                entry.get("Decision"),
                entry.get("URL"),
                entry.get("Term"),
                entry.get("Nationality"),
                gpa_fl,
                gretot,
                grev,
                greaw,
                entry.get("Comments")
            ))
