import psycopg
import json
from datetime import datetime
import re
#Load the Json results
with open("applicant_data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

#Connect to the database
connection = psycopg.connect(
    dbname = "applicants",
    user = "postgres"
    )

#removes the 'GPA' from the GPA resutls
def gpa(gpa_str):
    if not gpa_str:
        return None
    match = re.search(r"(\d\.\d{1,2})", gpa_str)
    return float(match.group(1)) if match else None

def gres(gre_str):
    if not gre_str:
        return None, None, None
    
    #Splits up the GRE results into 3 seperate numbers
    #regex obtained from ai
    total = verbal = aw = None
    total_match = re.search(r'\bGRE\s+(\d{3})\b', gre_str)
    verbal_match = re.search(r'\bGRE\s+V\s+(\d{2,3})\b', gre_str)
    aw_match = re.search(r'\bGRE\s+AW\s+(\d\.\d{1,2})\b', gre_str)

    if total_match:
        total = float(total_match.group(1))
    if verbal_match:
        verbal = float(verbal_match.group(1))
    if aw_match:
        aw = float(aw_match.group(1))
    
    return total, verbal, aw

with connection.cursor() as cur:
    cur.execute("DROP TABLE IF EXISTS applicants;")
    #Creates the Table
    cur.execute(
        """CREATE TABLE IF NOT EXISTS applicants(
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        program TEXT,
        comments TEXT,
        date_added DATE,
        url TEXT,
        status TEXT,
        term TEXT,
        us_or_international TEXT,
        gpa FLOAT,
        gre FLOAT,
        gre_v FLOAT,
        gre_aw FLOAT,
        degree TEXT);"""
        )
    #Inputs the data to the table
    for entry in data:
        date_str = entry.get("Date Added")
        try:
            date_obj = datetime.strptime(date_str, "%B %d, %Y").date() if date_str else None
        except ValueError:
            date_obj = None

        gpa_fl = gpa(entry.get("GPA"))
        gretot, grev,greaw = gres(entry.get("GRE"))
        dept = entry.get("Program")
        uni = entry.get("University")
        program = f"{dept}, {uni}"
        
        cur.execute("""
            INSERT INTO applicants (
                program, degree, date_added, status,
                url, term, us_or_international, gpa, gre, gre_v, gre_aw, comments
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);

        """, (
            program,
            entry.get("Degree"),
            date_obj,
            entry.get("Decision"),
            entry.get("URL"),
            entry.get("Term"),
            entry.get("Nationality"),
            gpa_fl,
            gretot,
            grev,
            greaw,
            entry.get("Comments")
        ))
    #Commit and close
    connection.commit()
    cur.close()
connection.close()
